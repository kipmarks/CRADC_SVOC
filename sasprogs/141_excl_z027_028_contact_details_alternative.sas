/**********************************************************************
Project: 	  Data & Intelligence Platform - Heritage

Program Name: 141_z027_028_contact_details_alternative.sas

Overview:     
              
***********************************************************************
                  DEPENDENCIES AND LIMITATIONS
      
 
Parameter(s):  None

Dependencies:  None


***********************************************************************
                    CHANGE CONTROL LOG 

Change log (in reverse chronological order) :-

June2019  	KM  Migration to DIP
2015-2019  	Original EXCL development on Heritage Platform by
            Richard Holley and members of the Analytics Team.
            	 
                                      
***********************************************************************/
/*Getting all phone numbers from TBL_CONTACT and sorting out which is CELL/WORK>HOME*/
proc sort data=tdw_curr.tbl_customerinfo_vall;
	by customer_key;
run;
proc sort data=tdw_curr.tbl_contact_vall;
	by customer_key;
run;
DATA ExclWork.PHONE_NUMBERS(KEEP=IRD_NUMBER LIST_FORMAT_NAME CUSTOMER_KEY CUSTOMER_TYPE FAMILY_NAME FIRST_NAME CELL_PHONE_NUMBER PHONE_NUMBER WORK_PHONE_NUMBER RENAME=(FAMILY_NAME=NAME FIRST_NAME=FIRST_NAMES)) ;
MERGE TDW_CURR.TBL_CUSTOMERINFO_VALL(KEEP=IRD_NUMBER CUSTOMER_KEY LIST_FORMAT_NAME CUSTOMER_TYPE FAMILY_NAME FIRST_NAME CURRENT_REC_FLAG  EFFECTIVE_TO  WHERE=(CURRENT_REC_FLAG='Y' AND EFFECTIVE_TO IS NULL ))
      TDW_CURR.TBL_CONTACT_VALL     (KEEP=CUSTOMER_KEY PHONE_TYPE_1 COUNTRY_CODE_1 AREA_CODE_1 PHONE_NUMBER_1 PHONE_TYPE_2 COUNTRY_CODE_2 AREA_CODE_2 PHONE_NUMBER_2 PHONE_TYPE_3 COUNTRY_CODE_3 AREA_CODE_3 PHONE_NUMBER_3 PHONE_TYPE_4 COUNTRY_CODE_4 AREA_CODE_4 PHONE_NUMBER_4  PHONE_TYPE_5 COUNTRY_CODE_5 AREA_CODE_5 PHONE_NUMBER_5 CURRENT_REC_FLAG EFFECTIVE_TO VER WHERE=(CURRENT_REC_FLAG='Y' AND EFFECTIVE_TO IS NULL AND VER=0));
BY CUSTOMER_KEY ;
     IF PHONE_TYPE_1='CELL' AND COUNTRY_CODE_1=64 THEN CELL_PHONE_NUMBER=PHONE_NUMBER_1;
ELSE IF PHONE_TYPE_2='CELL' AND COUNTRY_CODE_2=64 THEN CELL_PHONE_NUMBER=PHONE_NUMBER_2;
ELSE IF PHONE_TYPE_3='CELL' AND COUNTRY_CODE_3=64 THEN CELL_PHONE_NUMBER=PHONE_NUMBER_3;
ELSE IF PHONE_TYPE_4='CELL' AND COUNTRY_CODE_4=64 THEN CELL_PHONE_NUMBER=PHONE_NUMBER_4;
ELSE IF PHONE_TYPE_5='CELL' AND COUNTRY_CODE_5=64 THEN CELL_PHONE_NUMBER=PHONE_NUMBER_5;

     IF PHONE_TYPE_1='HOM'  AND COUNTRY_CODE_1=64 THEN PHONE_NUMBER=STRIP(CATS(AREA_CODE_1,PHONE_NUMBER_1));
ELSE IF PHONE_TYPE_2='HOM'  AND COUNTRY_CODE_2=64 THEN PHONE_NUMBER=STRIP(CATS(AREA_CODE_2,PHONE_NUMBER_2));
ELSE IF PHONE_TYPE_3='HOM'  AND COUNTRY_CODE_3=64 THEN PHONE_NUMBER=STRIP(CATS(AREA_CODE_3,PHONE_NUMBER_3));
ELSE IF PHONE_TYPE_4='HOM'  AND COUNTRY_CODE_4=64 THEN PHONE_NUMBER=STRIP(CATS(AREA_CODE_4,PHONE_NUMBER_4));
ELSE IF PHONE_TYPE_5='HOM'  AND COUNTRY_CODE_5=64 THEN PHONE_NUMBER=STRIP(CATS(AREA_CODE_5,PHONE_NUMBER_5));
ELSE IF PHONE_TYPE_1='HOM'   THEN PHONE_NUMBER=STRIP(CATS(COUNTRY_CODE_1,AREA_CODE_1,PHONE_NUMBER_1));
ELSE IF PHONE_TYPE_2='HOM'   THEN PHONE_NUMBER=STRIP(CATS(COUNTRY_CODE_2,AREA_CODE_2,PHONE_NUMBER_2));
ELSE IF PHONE_TYPE_3='HOM'   THEN PHONE_NUMBER=STRIP(CATS(COUNTRY_CODE_3,AREA_CODE_3,PHONE_NUMBER_3));
ELSE IF PHONE_TYPE_4='HOM'   THEN PHONE_NUMBER=STRIP(CATS(COUNTRY_CODE_4,AREA_CODE_4,PHONE_NUMBER_4));
ELSE IF PHONE_TYPE_5='HOM'   THEN PHONE_NUMBER=STRIP(CATS(COUNTRY_CODE_5,AREA_CODE_5,PHONE_NUMBER_5));

     IF PHONE_TYPE_1='BSN'  AND COUNTRY_CODE_1=64 THEN WORK_PHONE_NUMBER=STRIP(CATS(AREA_CODE_1,PHONE_NUMBER_1));
ELSE IF PHONE_TYPE_2='BSN'  AND COUNTRY_CODE_2=64 THEN WORK_PHONE_NUMBER=STRIP(CATS(AREA_CODE_2,PHONE_NUMBER_2));
ELSE IF PHONE_TYPE_3='BSN'  AND COUNTRY_CODE_3=64 THEN WORK_PHONE_NUMBER=STRIP(CATS(AREA_CODE_3,PHONE_NUMBER_3));
ELSE IF PHONE_TYPE_4='BSN'  AND COUNTRY_CODE_4=64 THEN WORK_PHONE_NUMBER=STRIP(CATS(AREA_CODE_4,PHONE_NUMBER_4));
ELSE IF PHONE_TYPE_5='BSN'  AND COUNTRY_CODE_5=64 THEN WORK_PHONE_NUMBER=STRIP(CATS(AREA_CODE_5,PHONE_NUMBER_5));
ELSE IF PHONE_TYPE_1='BSN'   THEN WORK_PHONE_NUMBER=STRIP(CATS(COUNTRY_CODE_1,AREA_CODE_1,PHONE_NUMBER_1));
ELSE IF PHONE_TYPE_2='BSN'   THEN WORK_PHONE_NUMBER=STRIP(CATS(COUNTRY_CODE_2,AREA_CODE_2,PHONE_NUMBER_2));
ELSE IF PHONE_TYPE_3='BSN'   THEN WORK_PHONE_NUMBER=STRIP(CATS(COUNTRY_CODE_3,AREA_CODE_3,PHONE_NUMBER_3));
ELSE IF PHONE_TYPE_4='BSN'   THEN WORK_PHONE_NUMBER=STRIP(CATS(COUNTRY_CODE_4,AREA_CODE_4,PHONE_NUMBER_4));
ELSE IF PHONE_TYPE_5='BSN'   THEN WORK_PHONE_NUMBER=STRIP(CATS(COUNTRY_CODE_5,AREA_CODE_5,PHONE_NUMBER_5));

/*IF WORK_PHONE_NUMBER EQ '' AND CELL_PHONE_NUMBER EQ '' AND PHONE_NUMBER EQ '' THEN DELETE;*/

RUN;

PROC SORT DATA=ExclWork.PHONE_NUMBERS OUT=PHONE_NUMBERS NODUPKEY; 
BY CUSTOMER_KEY; 
RUN;

/*EMPLOYERS*/
PROC SQL;
CREATE TABLE EMPLOYERS AS 
        SELECT EMPLOYEE_IRD_NUMBER AS IRD_NUMBER,
               EMPLOYER_IRD_NUMBER
          FROM edw_curr.RETURN_LINE_ITEMS_VALL
         WHERE RETURN_PERIOD_DATE > "&EFF_DATE."d - 90 AND
               RETURN_TYPE = 'IR348' AND
               EMPLOYER_IRD_NUMBER NOT IN (70933500,70507935,70724286,48142397,81880867);
QUIT;
PROC SQL;
  CREATE TABLE NO_PH_EMP AS
        SELECT A.IRD_NUMBER,
               A.CUSTOMER_KEY,
               C.CELL_PHONE_NUMBER,
               C.PHONE_NUMBER,
               C.WORK_PHONE_NUMBER,
               C.FIRST_NAMES,
               C.NAME
          FROM PHONE_NUMBERS A
    INNER JOIN EMPLOYERS     B ON A.IRD_NUMBER = B.IRD_NUMBER
    INNER JOIN PHONE_NUMBERS C ON B.EMPLOYER_IRD_NUMBER = C.IRD_NUMBER;
QUIT;
PROC SORT DATA=NO_PH_EMP NODUPKEY; BY IRD_NUMBER; RUN;
/*NOPS*/
DATA NOPS(keep=to_ird_number from_ird_number 
          rename= (to_ird_number = ird_number from_ird_number = nop_ird_number));
 SET TDW_CURR.TBL_LINK(WHERE=(LINK_TYPE = 'NOMPRS' 
                           AND CEASE = . AND VER = 0 
                           AND CURRENT_REC_FLAG = 'Y' AND EFFECTIVE_TO = .));
RUN;

PROC SQL;
  CREATE TABLE NO_PH_NOP AS
        SELECT A.IRD_NUMBER,
               A.CUSTOMER_KEY,
               C.CELL_PHONE_NUMBER,
               C.PHONE_NUMBER,
               C.WORK_PHONE_NUMBER,
               C.FIRST_NAMES,
               C.NAME
          FROM PHONE_NUMBERS A
    INNER JOIN NOPS          B ON A.IRD_NUMBER = B.IRD_NUMBER
    INNER JOIN PHONE_NUMBERS C ON B.NOP_IRD_NUMBER = C.IRD_NUMBER;
QUIT;
PROC SORT DATA=NO_PH_NOP NODUPKEY; BY IRD_NUMBER; RUN;


/*  pulling it all together, giving priority to NOP phone number over EMP*/ 

DATA ExclWork.ALTERNATIVE(KEEP=IRD_NUMBER CUSTOMER_KEY CONTACTDETAILSALTERNATIVE CONTACTDETAILSALTDSC);
RETAIN IRD_NUMBER CUSTOMER_KEY CONTACTDETAILSALTERNATIVE CONTACTDETAILSALTDSC;
LENGTH CONTACTDETAILSALTDSC $100;
MERGE NO_PH_EMP (IN=A) 
      NO_PH_NOP (IN=B);
BY IRD_NUMBER;
IF A OR B;
     IF CELL_PHONE_NUMBER NE '' THEN PHONE = CELL_PHONE_NUMBER;
ELSE IF WORK_PHONE_NUMBER NE '' THEN PHONE = WORK_PHONE_NUMBER;
ELSE IF HOME_PHONE_NUMBER NE '' THEN PHONE = HOME_PHONE_NUMBER;
IF PHONE= '' THEN DELETE;
IF B THEN DO;
	CONTACTDETAILSALTERNATIVE = PHONE; 
	CONTACTDETAILSALTDSC  = STRIP(TRIM(LEFT(FIRST_NAMES))||' '||TRIM(LEFT(NAME))||' '||"NOP");
	END;
ELSE IF A THEN DO;
	CONTACTDETAILSALTERNATIVE = PHONE; 
	CONTACTDETAILSALTDSC = STRIP(TRIM(LEFT(FIRST_NAMES))||' '||TRIM(LEFT(NAME))||' '||"EMP");
	END;
RUN;
PROC DATASETS LIB=WORK NOLIST; DELETE PHONE_NUMBERS NO_PH_EMP NO_PH_NOP EMPLOYERS NOPS; RUN;
